version: '3.8'

services:
  database:
    image: timescale/timescaledb-ha:pg17-latest
    container_name: emergency-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: palo_alto_emergency
      POSTGRES_USER: emergency_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-emergency_secure_pass_2025}
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_HOST_AUTH_METHOD:-scram-sha-256}
      # PostgreSQL 17 specific settings
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=peer"
      # TimescaleDB settings
      TIMESCALEDB_TELEMETRY: 'off'
      TS_TUNE_MEMORY: ${TS_TUNE_MEMORY:-4GB}
      TS_TUNE_NUM_CPUS: ${TS_TUNE_NUM_CPUS:-4}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5432:5432"
    networks:
      - emergency-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U emergency_user -d palo_alto_emergency"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: >
      postgres
      -c shared_preload_libraries=timescaledb
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB

  api:
    build: ./src/api
    container_name: emergency-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: database
      DB_NAME: palo_alto_emergency
      DB_USER: emergency_user
      DB_PASSWORD: ${DB_PASSWORD:-emergency_secure_pass_2025}
      # PostgreSQL 17 connection settings
      DB_SSL: ${DB_SSL:-false}
      DB_CONNECTION_TIMEOUT: 30000
    ports:
      - "3000:3000"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - emergency-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3

  web:
    image: nginx:alpine
    container_name: emergency-web
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./src/web:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - api
    networks:
      - emergency-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 5s
      retries: 3

volumes:
  postgres_data:
    driver: local

networks:
  emergency-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
